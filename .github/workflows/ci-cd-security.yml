name: CI-CD Security (unified)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  TARGET: ${{ secrets.STAGING_URL }}

jobs:
  # --- SAST (Semgrep) ---
  sast_semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install semgrep
      - name: Semgrep (SARIF)
        run: |
          semgrep --config "p/owasp-top-ten p/security-audit p/secrets" \
                  --sarif --output semgrep.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.sarif

  # --- SCA (OSV) ---
  sca_osv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          curl -sSfL https://raw.githubusercontent.com/google/osv-scanner/main/install.sh \
            | sh -s -- -b /usr/local/bin
          osv-scanner -r . --format sarif > osv.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: osv.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: osv-report
          path: osv.sarif

  # --- Build (placeholder) ---
  build:
    runs-on: ubuntu-latest
    needs: [sast_semgrep, sca_osv]
    steps:
      - run: echo "Build ok (placeholder)"

  # --- Deploy Staging (placeholder) ---
  deploy_staging:
    runs-on: ubuntu-latest
    needs: [build]
    environment: staging
    steps:
      - run: |
          test -n "${TARGET}" || (echo "STAGING_URL não configurado" && exit 1)
          echo "Deploy para ${TARGET} (placeholder)"

  # --- DAST (ZAP Baseline) ---
  dast_zap:
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    steps:
      - name: ZAP Baseline (fail on HIGH)
        run: |
          mkdir -p zap-out
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm -v "$PWD":/zap/wrk ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "${TARGET}" -r zap-report.html -J zap-report.json -m 2
          mv -f zap-report.* zap-out/
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-out

  # --- Gate de Deploy Prod (bloqueia se algo falhar) ---
  deploy_prod:
    runs-on: ubuntu-latest
    needs: [sast_semgrep, sca_osv, dast_zap]
    if: ${{ needs.sast_semgrep.result == 'success' && needs.sca_osv.result == 'success' && needs.dast_zap.result == 'success' }}
    steps:
      - run: echo "✅ Todos os checks OK — deploy liberado (placeholder)"

  # --- Notifica status no PR ---
  notify:
    runs-on: ubuntu-latest
    needs: [sast_semgrep, sca_osv, dast_zap]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Post summary
        uses: actions/github-script@v7
        with:
          script: |
            const s = {
              sast: '${{ needs.sast_semgrep.result }}',
              sca:  '${{ needs.sca_osv.result }}',
              dast: '${{ needs.dast_zap.result }}'
            }
            const body = `
            ### Security checks
            - SAST (Semgrep): **${s.sast}**
            - SCA  (OSV): **${s.sca}**
            - DAST (ZAP): **${s.dast}**

            > Deploy de produção é bloqueado automaticamente se algum check falhar.
            `
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            })
