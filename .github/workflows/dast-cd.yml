name: DAST - Local Java App + ZAP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read

env:
  APP_PORT: "8080"         # mude se sua app usar outra porta
  HEALTH_PATH: "/"         # mude para /actuator/health se você tiver Actuator
  SOFT_WAIT_SECS: "180"    # tempo máx. para aguardar a app (não falha se não subir)

jobs:
  dast:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17' # ajuste se for 21/11/etc.

      - name: Build (skip tests)
        run: ./mvnw -q -DskipTests package

      # Sobe a app localmente em background na porta 8080.
      # Tenta primeiro com o JAR (Spring Boot fat-jar). Se não houver JAR, cai para spring-boot:run.
      - name: Start app (background)
        run: |
          set -e
          mkdir -p runlogs
          if ls target/*.jar >/dev/null 2>&1; then
            echo "Starting via JAR..."
            nohup java -Dserver.port=${APP_PORT} -jar target/*.jar > runlogs/app.log 2>&1 &
          else
            echo "No JAR found; starting via spring-boot:run..."
            nohup ./mvnw -Dspring-boot.run.jvmArguments="-Dserver.port=${APP_PORT}" -DskipTests spring-boot:run > runlogs/app.log 2>&1 &
          fi
          echo $! > runlogs/app.pid
          sleep 5
          echo "App PID: $(cat runlogs/app.pid)"

      # Espera de forma "soft": não falha o job se a app não ficar OK a tempo
      - name: Soft wait for app
        run: |
          URL="http://localhost:${APP_PORT}${HEALTH_PATH}"
          echo "Waiting (soft) for ${URL} up to ${SOFT_WAIT_SECS}s..."
          end=$((SECONDS + SOFT_WAIT_SECS))
          ok=0
          while [ $SECONDS -lt $end ]; do
            code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 3 "$URL" || echo "000")
            echo "HTTP $code"
            if [ "$code" = "200" ] || [ "$code" = "204" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
              ok=1; break
            fi
            sleep 3
          done
          if [ $ok -eq 1 ]; then
            echo "App is up."
          else
            echo "App may not be fully ready. Proceeding anyway (soft wait)."
          fi

      # ZAP oficial – não falha o job por achados; salva artefatos
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: http://localhost:${{ env.APP_PORT }}
          cmd_options: >-
            -a -d
          allow_issue_writing: false
          fail_action: false
          artifact_name: zapreport   # evitar hífen no nome do artifact

      # Consolida relatórios
      - name: Collect ZAP artifacts
        if: always()
        run: |
          mkdir -p dast-reports
          cp -f report.html dast-reports/zap-report.html 2>/dev/null || true
          cp -f report.md   dast-reports/zap-report.md   2>/dev/null || true
          cp -f *.html      dast-reports/                2>/dev/null || true
          cp -f *.md        dast-reports/                2>/dev/null || true
          ls -lah dast-reports || true

      - name: Upload consolidated artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: dast-reports

      # Encerra a app e mostra logs (sempre)
      - name: Teardown app
        if: always()
        run: |
          echo "=== tail app.log ==="
          tail -n 400 runlogs/app.log || true
          if [ -f runlogs/app.pid ]; then
            kill $(cat runlogs/app.pid) 2>/dev/null || true
          fi
