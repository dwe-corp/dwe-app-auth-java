name: DAST - OWASP ZAP + Nikto (staging)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read

env:
  REPORT_DIR: ./dast-reports

jobs:
  dast:
    runs-on: ubuntu-latest
    name: Run DAST against staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create report dir
        run: mkdir -p $REPORT_DIR

      # (Opcional) Só para logar a URL de destino — não bloqueia execução
      - name: Log target URL (no healthcheck)
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}   # ex: https://staging.example.com
        run: |
          echo "DAST target: ${STAGING_URL:-<EMPTY>}"
          # tenta 1 curl rápido só para log, sem bloquear
          curl -s -I --max-time 5 "$STAGING_URL" || true

      # Sobe o ZAP em modo daemon
      - name: Start ZAP daemon (container)
        env:
          ZAP_PORT: 8090
          ZAP_API_KEY: ${{ secrets.ZAP_API_KEY }}
        run: |
          docker pull owasp/zap2docker-stable:latest
          docker run -d --name zap-dast \
            -p $ZAP_PORT:8090 \
            -e ZAP_API_KEY=${ZAP_API_KEY} \
            owasp/zap2docker-stable:latest \
            zap.sh -daemon -host 0.0.0.0 -port $ZAP_PORT -config api.key=${ZAP_API_KEY}
          echo "Waiting ZAP to start..."
          for i in {1..30}; do
            if curl -s http://localhost:$ZAP_PORT/ >/dev/null 2>&1; then
              echo "ZAP is up"
              break
            fi
            sleep 2
          done

      # Varredura ativa completa — continua mesmo se achar findings/erros (queremos o relatório)
      - name: Run ZAP full scan
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          REPORT_DIR: ${{ env.REPORT_DIR }}
        run: |
          echo "Starting ZAP full scan against $STAGING_URL ..."
          docker exec zap-dast \
            /bin/bash -c "python3 /zap/zap-full-scan.py \
              -t ${STAGING_URL} \
              -g gen.conf \
              -r /zap/reports/zap-report.html \
              -d -I || true"
          # Copia relatórios (se existirem)
          docker cp zap-dast:/zap/reports/zap-report.html $REPORT_DIR/zap-report.html || true
          docker cp zap-dast:/zap/reports/zap-report.xml  $REPORT_DIR/zap-report.xml  || true
          docker cp zap-dast:/zap/reports/zap-report.json $REPORT_DIR/zap-report.json || true
          ls -lah $REPORT_DIR || true
        continue-on-error: true

      # Nikto via Docker, salvando saída em arquivo
      - name: Run Nikto scan
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          REPORT_DIR: ${{ env.REPORT_DIR }}
        run: |
          echo "Running Nikto..."
          host=$(echo "$STAGING_URL" | sed -E 's#https?://##' | sed -E 's#/.*##')
          docker run --name nikto-temp --rm --entrypoint /bin/sh sullo/nikto -lc "
            nikto -h '$host' -o /tmp/nikto.txt || true
            cat /tmp/nikto.txt
          " | tee $REPORT_DIR/nikto.txt
        continue-on-error: true

      - name: Stop ZAP container
        if: always()
        run: |
          docker stop zap-dast || true
          docker rm zap-dast || true

      - name: Upload DAST artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: ${{ env.REPORT_DIR }}

      # (Opcional) Falha se houver High/Critical no JSON do ZAP
      - name: Fail on high/critical alerts (optional)
        if: always()
        env:
          REPORT_DIR: ${{ env.REPORT_DIR }}
        run: |
          jf="$REPORT_DIR/zap-report.json"
          if [ -f "$jf" ]; then
            echo "Parsing $jf for high/critical alerts..."
            # Ajuste o filtro conforme o esquema do JSON do ZAP na sua versão
            if command -v jq >/dev/null 2>&1; then
              high_count=$(jq '[.. | objects | select(.risk? != null) | select(.risk=="High" or .risk=="Critical")] | length' "$jf" 2>/dev/null || echo "0")
            else
              high_count=0
            fi
            echo "High/Critical alerts found: $high_count"
            if [ "$high_count" -ge 1 ]; then
              echo "Failing job: $high_count high/critical alerts" >&2
              exit 2
            fi
          else
            echo "No ZAP JSON found; skipping severity gate."
          fi
